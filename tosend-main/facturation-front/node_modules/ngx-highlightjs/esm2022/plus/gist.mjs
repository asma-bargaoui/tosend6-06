import { Directive, Pipe, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./code-loader";
class GistDirective {
    constructor(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    set gist(value) {
        if (value) {
            this._loader.getCodeFromGist(value).subscribe((gist) => this.gistLoad.emit(gist));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GistDirective, deps: [{ token: i1.CodeLoader }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.2", type: GistDirective, selector: "[gist]", inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" }, ngImport: i0 }); }
}
export { GistDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GistDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[gist]'
                }]
        }], ctorParameters: function () { return [{ type: i1.CodeLoader }]; }, propDecorators: { gist: [{
                type: Input
            }], gistLoad: [{
                type: Output
            }] } });
class GistFilePipe {
    transform(gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GistFilePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.2", ngImport: i0, type: GistFilePipe, name: "gistFile" }); }
}
export { GistFilePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GistFilePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'gistFile'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oaWdobGlnaHRqcy9wbHVzL3NyYy9naXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWlCLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSTVGLE1BR2EsYUFBYTtJQUV4QixZQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBVTdCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBVDlDLENBQUM7SUFFRCxJQUNJLElBQUksQ0FBQyxLQUFhO1FBQ3BCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3pGO0lBQ0gsQ0FBQzs4R0FWVSxhQUFhO2tHQUFiLGFBQWE7O1NBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUh6QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxRQUFRO2lCQUNuQjtpR0FPSyxJQUFJO3NCQURQLEtBQUs7Z0JBT0ksUUFBUTtzQkFBakIsTUFBTTs7QUFHVCxNQUdhLFlBQVk7SUFDdkIsU0FBUyxDQUFDLElBQVUsRUFBRSxRQUFnQjtRQUNwQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzVGLENBQUM7OEdBSFUsWUFBWTs0R0FBWixZQUFZOztTQUFaLFlBQVk7MkZBQVosWUFBWTtrQkFIeEIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFBpcGUsIElucHV0LCBPdXRwdXQsIFBpcGVUcmFuc2Zvcm0sIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2RlTG9hZGVyIH0gZnJvbSAnLi9jb2RlLWxvYWRlcic7XHJcbmltcG9ydCB7IEdpc3QgfSBmcm9tICcuL2dpc3QubW9kZWwnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZ2lzdF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHaXN0RGlyZWN0aXZlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbG9hZGVyOiBDb2RlTG9hZGVyKSB7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBnaXN0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICB0aGlzLl9sb2FkZXIuZ2V0Q29kZUZyb21HaXN0KHZhbHVlKS5zdWJzY3JpYmUoKGdpc3Q6IEdpc3QpID0+IHRoaXMuZ2lzdExvYWQuZW1pdChnaXN0KSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgZ2lzdExvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdpc3Q+KCk7XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ2lzdEZpbGUnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHaXN0RmlsZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oZ2lzdDogR2lzdCwgZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgcmV0dXJuIChnaXN0ICYmIGdpc3QuZmlsZXMgJiYgZ2lzdC5maWxlc1tmaWxlTmFtZV0pID8gZ2lzdC5maWxlc1tmaWxlTmFtZV0uY29udGVudCA6IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==