import { Inject, Injectable, Optional } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { EMPTY } from 'rxjs';
import { catchError, publishReplay, refCount } from 'rxjs/operators';
import { GIST_OPTIONS } from './gist.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class CodeLoader {
    constructor(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param id Gist ID
     */
    getCodeFromGist(id) {
        let params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });
    }
    /**
     * Get code by URL
     * @param url File raw link
     */
    getCodeFromUrl(url) {
        return this.fetchFile(url, { responseType: 'text' });
    }
    /**
     * Check if OAuth option is provided
     */
    isOAuthProvided() {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    }
    fetchFile(url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            publishReplay(1), refCount(), catchError((err) => {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            }));
        }
        return EMPTY;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CodeLoader, deps: [{ token: i1.HttpClient }, { token: GIST_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CodeLoader, providedIn: 'root' }); }
}
export { CodeLoader };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CodeLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GIST_OPTIONS]
                }] }]; } });
function isUrl(url) {
    const regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaGlnaGxpZ2h0anMvcGx1cy9zcmMvY29kZS1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBUSxZQUFZLEVBQWUsTUFBTSxjQUFjLENBQUM7OztBQUUvRCxNQUdhLFVBQVU7SUFDckIsWUFBb0IsS0FBaUIsRUFBNEMsUUFBcUI7UUFBbEYsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUE0QyxhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQ3RHLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlLENBQUMsRUFBVTtRQUN4QixJQUFJLE1BQW1CLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDMUIsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNySDtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxlQUFlO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUNyRixDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQVcsRUFBRSxPQUFZO1FBQ3pDLHdCQUF3QjtRQUN4QixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUk7WUFDdEMsaUJBQWlCO1lBQ2pCLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFDaEIsUUFBUSxFQUFFLEVBQ1YsVUFBVSxDQUFDLENBQUMsR0FBVSxFQUFFLEVBQUU7Z0JBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsMENBQTBDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RSxPQUFPLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUNILENBQUM7U0FDSDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs4R0E3Q1UsVUFBVSw0Q0FDc0MsWUFBWTtrSEFENUQsVUFBVSxjQUZULE1BQU07O1NBRVAsVUFBVTsyRkFBVixVQUFVO2tCQUh0QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBRXlDLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsWUFBWTs7QUFnRHpFLFNBQVMsS0FBSyxDQUFDLEdBQVc7SUFDeEIsTUFBTSxNQUFNLEdBQUcsbUZBQW1GLENBQUM7SUFDbkcsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEVNUFRZIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHB1Ymxpc2hSZXBsYXksIHJlZkNvdW50IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBHaXN0LCBHSVNUX09QVElPTlMsIEdpc3RPcHRpb25zIH0gZnJvbSAnLi9naXN0Lm1vZGVsJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIENvZGVMb2FkZXIge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpIEBJbmplY3QoR0lTVF9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBHaXN0T3B0aW9ucykge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHBsdXMgY29kZVxyXG4gICAqIEBwYXJhbSBpZCBHaXN0IElEXHJcbiAgICovXHJcbiAgZ2V0Q29kZUZyb21HaXN0KGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEdpc3Q+IHtcclxuICAgIGxldCBwYXJhbXMhOiBIdHRwUGFyYW1zO1xyXG4gICAgaWYgKHRoaXMuaXNPQXV0aFByb3ZpZGVkKCkpIHtcclxuICAgICAgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKS5zZXQoJ2NsaWVudF9pZCcsIHRoaXMuX29wdGlvbnMuY2xpZW50SWQpLnNldCgnY2xpZW50X3NlY3JldCcsIHRoaXMuX29wdGlvbnMuY2xpZW50U2VjcmV0KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmZldGNoRmlsZShgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9naXN0cy8ke2lkfWAsIHsgcGFyYW1zLCByZXNwb25zZVR5cGU6ICdqc29uJyB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjb2RlIGJ5IFVSTFxyXG4gICAqIEBwYXJhbSB1cmwgRmlsZSByYXcgbGlua1xyXG4gICAqL1xyXG4gIGdldENvZGVGcm9tVXJsKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmZldGNoRmlsZSh1cmwsIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBPQXV0aCBvcHRpb24gaXMgcHJvdmlkZWRcclxuICAgKi9cclxuICBwcml2YXRlIGlzT0F1dGhQcm92aWRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMuX29wdGlvbnMgJiYgISF0aGlzLl9vcHRpb25zLmNsaWVudElkICYmICEhdGhpcy5fb3B0aW9ucy5jbGllbnRTZWNyZXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZldGNoRmlsZSh1cmw6IHN0cmluZywgb3B0aW9uczogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIC8vIENoZWNrIGlmIFVSTCBpcyB2YWxpZFxyXG4gICAgaWYgKGlzVXJsKHVybCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHVybCwgb3B0aW9ucykucGlwZShcclxuICAgICAgICAvLyBDYXRjaCByZXNwb25zZVxyXG4gICAgICAgIHB1Ymxpc2hSZXBsYXkoMSksXHJcbiAgICAgICAgcmVmQ291bnQoKSxcclxuICAgICAgICBjYXRjaEVycm9yKChlcnI6IEVycm9yKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbTmd4SGlnaGxpZ2h0XTogVW5hYmxlIHRvIGZldGNoIHRoZSBVUkwhJywgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRU1QVFk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaXNVcmwodXJsOiBzdHJpbmcpIHtcclxuICBjb25zdCByZWdFeHAgPSAvKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPy87XHJcbiAgcmV0dXJuIHJlZ0V4cC50ZXN0KHVybCk7XHJcbn1cclxuIl19