import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, from, EMPTY, zip, throwError } from 'rxjs';
import { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as i0 from "@angular/core";
// @dynamic
class HighlightLoader {
    constructor(doc, platformId, _options) {
        this.doc = doc;
        this.platformId = platformId;
        this._options = _options;
        // Stream that emits when hljs library is loaded and ready to use
        this._ready = new BehaviorSubject(null);
        this.ready = this._ready.asObservable().pipe(filter((hljs) => !!hljs), map((hljs) => hljs), take(1));
        if (isPlatformBrowser(platformId)) {
            // Check if hljs is already available
            if (doc.defaultView.hljs) {
                this._ready.next(doc.defaultView.hljs);
            }
            else {
                // Load hljs library
                this._loadLibrary().pipe(switchMap((hljs) => {
                    if (this._options && this._options.lineNumbersLoader) {
                        // Make hljs available on window object (required for the line numbers library)
                        doc.defaultView.hljs = hljs;
                        // Load line numbers library
                        return this.loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));
                    }
                    else {
                        this._ready.next(hljs);
                        return EMPTY;
                    }
                }), catchError((e) => {
                    console.error('[HLJS] ', e);
                    return EMPTY;
                })).subscribe();
                // Load highlighting theme
                if (this._options?.themePath) {
                    this.loadTheme(this._options.themePath);
                }
            }
        }
    }
    /**
     * Lazy-Load highlight.js library
     */
    _loadLibrary() {
        if (this._options) {
            if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {
                return throwError(() => 'The full library and the core library were imported, only one of them should be imported!');
            }
            if (this._options.fullLibraryLoader && this._options.languages) {
                return throwError(() => 'The highlighting languages were imported they are not needed!');
            }
            if (this._options.coreLibraryLoader && !this._options.languages) {
                return throwError(() => 'The highlighting languages were not imported!');
            }
            if (!this._options.coreLibraryLoader && this._options.languages) {
                return throwError(() => 'The core library was not imported!');
            }
            if (this._options.fullLibraryLoader) {
                return this.loadFullLibrary();
            }
            if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {
                return this.loadCoreLibrary().pipe(switchMap((hljs) => this._loadLanguages(hljs)));
            }
        }
        return throwError(() => 'Highlight.js library was not imported!');
    }
    /**
     * Lazy-load highlight.js languages
     */
    _loadLanguages(hljs) {
        const languages = Object.entries(this._options.languages).map(([langName, langLoader]) => importModule(langLoader()).pipe(tap((langFunc) => hljs.registerLanguage(langName, langFunc))));
        return zip(...languages).pipe(map(() => hljs));
    }
    /**
     * Import highlight.js core library
     */
    loadCoreLibrary() {
        return importModule(this._options.coreLibraryLoader());
    }
    /**
     * Import highlight.js library with all languages
     */
    loadFullLibrary() {
        return importModule(this._options.fullLibraryLoader());
    }
    /**
     * Import line numbers library
     */
    loadLineNumbers() {
        return importModule(this._options.lineNumbersLoader());
    }
    /**
     * Reload theme styles
     */
    setTheme(path) {
        if (isPlatformBrowser(this.platformId)) {
            if (this._themeLinkElement) {
                this._themeLinkElement.href = path;
            }
            else {
                this.loadTheme(path);
            }
        }
    }
    /**
     * Load theme
     */
    loadTheme(path) {
        this._themeLinkElement = this.doc.createElement('link');
        this._themeLinkElement.href = path;
        this._themeLinkElement.type = 'text/css';
        this._themeLinkElement.rel = 'stylesheet';
        this._themeLinkElement.media = 'screen,print';
        this.doc.head.appendChild(this._themeLinkElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: HighlightLoader, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: HighlightLoader, providedIn: 'root' }); }
}
export { HighlightLoader };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: HighlightLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HIGHLIGHT_OPTIONS]
                }] }]; } });
/**
 * Map loader response to module object
 */
const importModule = (moduleLoader) => {
    return from(moduleLoader).pipe(filter((module) => !!module && !!module.default), map((module) => module.default));
};
//# sourceMappingURL=data:application/json;base64,